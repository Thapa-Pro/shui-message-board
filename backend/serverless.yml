service: shui-backend
frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-north-1
  environment:
    MESSAGES_TABLE: ${self:service}-Messages-${sls:stage}
    USERS_TABLE: ${self:service}-Users-${sls:stage}
    JWT_SECRET: super-secret-key # simple for exam; change in real projects
  httpApi:
    cors:
      allowedOrigins: ["*"]
      allowedHeaders: [Content-Type, Authorization]
      allowedMethods: [GET, POST, PUT, DELETE]
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:Query
          Resource:
            - { "Fn::GetAtt": [MessagesTable, Arn] }
            - { "Fn::Sub": "${MessagesTable.Arn}/index/*" }
            - { "Fn::GetAtt": [UsersTable, Arn] }

functions:
  listMessages:
    handler: handlers/listMessages.handler
    events:
      - httpApi:
          path: /messages
          method: GET

  createMessage:
    handler: handlers/createMessage.handler
    events:
      - httpApi:
          path: /messages
          method: POST

  updateMessage:
    handler: handlers/updateMessage.handler
    events:
      - httpApi:
          path: /messages/{id}
          method: PUT

  deleteMessage:
    handler: handlers/deleteMessage.handler
    events:
      - httpApi:
          path: /messages/{id}
          method: DELETE

  getMessagesByUser:
    handler: handlers/getMessagesByUser.handler
    events:
      - httpApi:
          path: /users/{username}/messages
          method: GET

  register:
    handler: handlers/register.handler
    events:
      - httpApi:
          path: /auth/register
          method: POST

  login:
    handler: handlers/login.handler
    events:
      - httpApi:
          path: /auth/login
          method: POST

resources:
  Resources:
    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MESSAGES_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id # PK
            AttributeType: S
          - AttributeName: username # GSI PK
            AttributeType: S
          - AttributeName: createdAt # GSI SK
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: byUsername
            KeySchema:
              - AttributeName: username
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection: { ProjectionType: ALL }

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
